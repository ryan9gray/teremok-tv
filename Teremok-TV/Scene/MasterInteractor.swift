//
//  MasterInteractor.swift
//  Teremok-TV
//
//  Created by R9G on 16/09/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MasterBusinessLogic {
    func identifySession()
    func logoutSession()
}

protocol MasterDataStore {
    var profileModel: GetProfileResponse? { get set }
}

final class MasterInteractor: MasterBusinessLogic, MasterDataStore {
    var presenter: MasterPresentationLogic?
    let service: ProfileProtocol = ProfileService()
    var profileModel: GetProfileResponse?
    var isOffline = false
    let onDemand = OnDemandLoader()

    var keychain: KeychainService? = {
        return MainKeychainService()
    }()

    var rateService = StoreReviewHelper()
    
    init() {
        NetworkManager.shared.startNetworkReachabilityObserver()
        NotificationCenter.default.addObserver(self, selector: #selector(profileDidChanged(_:)), name: .ProfileNeedReload, object: nil)
        rateService.checkAndAskForReview()
        getOnDemandResources()
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self, name: .ProfileNeedReload, object: nil)
    }
 
    
    func getProfile(_ isNewSession: Bool = false) {
        service.getProfile(isNewSession: isNewSession) { [weak self] (result) in
            switch result {
            case .success(let response):
                self?.profileModel = response
                if let profileResp = response.profile {
                    let profile = Profile(with: profileResp)
                    AppCacher.mappable.saveObject(profile)
                    Profile.current = profile                    
                    self?.presenter?.presentProfileData()
                }
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }
    
    @objc private func profileDidChanged(_ notification: Notification?) {
        getProfile()
    }

    func logoutSession(){
        keychain?.resetAuthentication()
        keychain?.resetAuthSession()
        LocalStore.logout()
        profileModel = nil
        AppCacher.mappable.clearAllMappable()
        Profile.current = nil
    }
    
    func identifySession() {
        if let session = keychain?.authSession, !session.isEmpty {
            getProfile(true)
        }
//        else {
//            presenter?.presentAuthScreen()
//        }
        presenter?.presentMain()
    }

    func getOnDemandResources() {
        onDemand.loadOnDemandAssets()
    }
}
