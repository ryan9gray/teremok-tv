//
//  ChildProfileAddViewController.swift
//  Teremok-TV
//
//  Created by R9G on 30/08/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import InfiniteScrolling

protocol ChildProfileAddDisplayLogic: CommonDisplayLogic {
    func display(birthday: String)
    func displayFinish()
    func displayChild(_ child: Child)
}

class ChildProfileAddViewController: AbstracViewController, ChildProfileAddDisplayLogic {
    var activityView: LottieHUD?
    
    var interactor: ChildProfileAddBusinessLogic?
    var router: (NSObjectProtocol & ChildProfileAddRoutingLogic & ChildProfileAddDataPassing & CommonRoutingLogic)?

    // MARK: Object lifecycle
    
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ChildProfileAddInteractor()
        let presenter = ChildProfileAddPresenter()
        let router = ChildProfileAddRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    @IBOutlet private var collectionView: UICollectionView!
    
    @IBOutlet private var birthdayTextField: UITextField!
    @IBOutlet private var nameFld: UITextField!
    private var pickerIsVisible = false
    private var sex: Sex = .man
    
    @IBOutlet private var manBtn: UIButton!
    @IBOutlet private var womanBtn: UIButton!
    
    @IBOutlet private var avatarBtn: AvatarButton!
    @IBOutlet private var sexButtons: [UIButton]!
    @IBOutlet private var birthdayDatePicker: UIDatePicker!
    @IBAction func avatarClick(_ sender: Any) {
        isShowAvatars.toggle()
    }
    @IBOutlet private var collectionConstr: NSLayoutConstraint!
    
    @IBAction func sexClick(_ sender: UIButton) {
        sexButtons.forEach{ $0.isSelected = false }
        sender.isSelected = true
        switch sender.tag {
        case 1:
            sex = .man
        case 2:
            sex = .woman
        default:
            break
        }
    }
    
    // MARK: Main

    override func viewDidLoad() {
        super.viewDidLoad()
        
        prepareUI()
        //showPreloader()
        interactor?.fillChild()
    }
    
    private func prepareUI(){
        hideKeyboardWhenTappedAround()
        setupCollection()
        
        birthdayTextField.delegate = self
        birthdayDatePicker.addTarget(self, action: #selector(datePickerValueChanged(_:)), for: .valueChanged)
        birthdayDatePicker.maximumDate = Date()
        birthdayDatePicker.minimumDate = Date(year: 2000, month: 1, day: 1)
        birthdayDatePicker.backgroundColor = .white
        birthdayTextField.inputAccessoryView = UIToolbar.inputAccessoryWith(style: .done(birthdayTextField))
        birthdayTextField.inputView = birthdayDatePicker
    }

    @IBAction func saveClick(_ sender: Any) {
        save()
    }

    func save(){
        guard let name = nameFld.text, !name.isEmpty, let bd = birthdayTextField.text, !bd.isEmpty  else {
            return
        }
        self.interactor?.done(name: name, birthDate: bd, sex: sex, avatar: avatarImage)
    }

    
    func displayChild(_ child: Child){
        nameFld.text = child.name
        avatarBtn.setAvatar(linktoLoad: child.pic ?? "")
        sex = child.sex ?? .man
        switchSex(sex)
    }
    func switchSex(_ sex: Sex){
        sexButtons.forEach{ $0.isSelected = false }
        switch sex {
        case .man:
            manBtn.isSelected = true
        case .woman:
            womanBtn.isSelected = true
            break
        }
    }
    
    func reverseHidden() {
        pickerIsVisible.toggle()
    }

    @objc func datePickerValueChanged(_ datePicker: UIDatePicker) {
        interactor?.choosed(birthday: datePicker.date)
    }
    func display(birthday: String) {
        birthdayTextField.text = birthday
    }
    func displayFinish() {
        hidePreloader()
        self.router?.routToDoneProfile()
    }
    
    // MARK: Collection
    
    var infiniteScrollingBehaviour: InfiniteScrollingBehaviour!
    
    var avatarImages: [Avatar] = Avatar.basicAvatars {
        didSet{
            infiniteScrollingBehaviour.reload(withData: avatarImages)
        }
    }
    var isShowAvatars: Bool = false {
        didSet {
            showCollection()
        }
    }
    func showCollection(){
        view.layoutIfNeeded()
        self.collectionConstr.constant = isShowAvatars ? 5 : UIScreen.main.bounds.width/2
        UIView.animate(withDuration: 0.5) {
            self.view.layoutIfNeeded()
        }
    }
    private var avatarImage: UIImage?
    
    func setAvatar(_ im: UIImage?){
        avatarImage = im
        self.avatarBtn.setAvatar(im)
    }
    func libCamOpen() {
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.sourceType = .photoLibrary
        present(picker, animated: true, completion: nil)
        
    }
    func setupCollection() {
        collectionView.allowsMultipleSelection = false
        collectionView.register(cells: [AvatarCollectionViewCell.self])
        if let _ = infiniteScrollingBehaviour {
        }
        else {
            let configuration = CollectionViewConfiguration(layoutType: .fixedSize(sizeValue: 56, lineSpacing: 0), scrollingDirection: .vertical)
            infiniteScrollingBehaviour = InfiniteScrollingBehaviour(withCollectionView: collectionView, andData: self.avatarImages
            , delegate: self, configuration: configuration)
        }
    }
    func optimazeAvatar(_ image: UIImage?){
        guard let image = image else {
            return
        }
        image.asyncResizeImageUsingVImage(size: CGSize(width: 200, height: 200)) { (im) in
            self.setAvatar(im)
        }
    }

}

extension ChildProfileAddViewController: UITextFieldDelegate {
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        true
    }
    func updateValueLabel(value: String?) {
        birthdayTextField.text = value
    }

    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
}

extension ChildProfileAddViewController: InfiniteScrollingBehaviourDelegate {
    func configuredCell(forItemAtIndexPath indexPath: IndexPath, originalIndex: Int, andData data: InfiniteScollingData, forInfiniteScrollingBehaviour behaviour: InfiniteScrollingBehaviour) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withCell: AvatarCollectionViewCell.self, for: indexPath)
        if let avatar = data as? Avatar {
            cell.avatarImageView.image = avatar.image
        }
        return cell
    }

    func didSelectItem(atIndexPath indexPath: IndexPath, originalIndex: Int, andData data: InfiniteScollingData, inInfiniteScrollingBehaviour behaviour: InfiniteScrollingBehaviour) {
        // handle tap events
        self.isShowAvatars = false
        if let avatar = data as? Avatar {
            if avatar.isCamera {
                libCamOpen()
            }
            else {
                setAvatar(avatar.image)
            }
        }
    }
}

extension ChildProfileAddViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        if let image = info[.originalImage] as? UIImage {
            optimazeAvatar(image.fixOrientation())
        }
        picker.dismiss(animated: true, completion: nil)
    }
}
