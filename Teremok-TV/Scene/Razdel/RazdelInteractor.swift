//
//  RazdelInteractor.swift
//  Teremok-TV
//
//  Created by R9G on 02/09/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RazdelBusinessLogic {
    func fetchSerials()
    var hasMore : Bool { get }
}

protocol RazdelDataStore {
    var razdelId: Int? { get set }
    var razdeResponse:RazdelResponse?  { get set }
    var items: [RazdelItemResponse] { get set }
    var screen: RazdelVCModel.Screen { get set }
}

class RazdelInteractor: RazdelBusinessLogic, RazdelDataStore {
    var razdeResponse: RazdelResponse?

    var screen: RazdelVCModel.Screen = .catalog
    var presenter: RazdelPresentationLogic?
    let service: RazdelProtocol = RazdelService()

    var razdelId: Int?
    var items: [RazdelItemResponse] = []
    
    var nextShift: Int?
    let countSerials = 10
    
    var hasMore : Bool = true

    func fetchSerials() {
        switch screen {
            case .catalog:
                fetchCatalog()
            case .razdel(let id):
                fetchRazdel(id: id)
            case .search:
                break
        }
    }

    func fetchRazdel(id: Int){
        guard hasMore else { return }

        service.getSerials(razdId: id, itemsOnPage: countSerials, shiftItem: nextShift ?? 0) {  [weak self] (result) in
            switch result {
            case .success(let razdelResponse):
                self?.response(serials: razdelResponse)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }

    func fetchCatalog(){
        guard hasMore else { return }

        service.getCatalog(itemsOnPage: countSerials, shiftItem: nextShift ?? 0) { [weak self] (result) in
            switch result {
            case .success(let videos):
                self?.response(serials: videos)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }

    func response(serials: RazdelResponse){
        self.razdeResponse = serials
        guard let items = serials.items else { return }
        self.nextShift = serials.startItemIdInNextPage
        self.hasMore = items.count > 0
        self.items.append(contentsOf: items)
        self.presenter?.present(items: items)
    }
}
