//
//  ChildsViewController.swift
//  Teremok-TV
//
//  Created by R9G on 13/10/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChildsDisplayLogic: CommonDisplayLogic {
    func displayProfile()
    func displayChildProfile(model: GetProfileResponse)
}

class ChildsViewController: AbstracViewController, ChildsDisplayLogic {
    var activityView: LottieHUD?
    
    var interactor: ChildsBusinessLogic?
    var router: (NSObjectProtocol & ChildsRoutingLogic & ChildsDataPassing & CommonRoutingLogic)?

    // MARK: Object lifecycle
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ChildsInteractor()
        let presenter = ChildsPresenter()
        let router = ChildsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    @IBOutlet private var firstChild: ChildView!
    @IBOutlet private var secondChild: ChildView!
    @IBOutlet private var thirdChild: ChildView!

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        prepareUI()
    }

    func prepareUI(){
        firstChild.delegate = self
        secondChild.delegate = self
        thirdChild.delegate = self

        displayProfile()
    }
    // MARK: Do something
    
    func plusClick(){
        router?.navigateAddChild()
    }
    func displayProfile(){
        guard let profile = Profile.current else { return }
        
        setAvatars(childs: profile.childs)
    }
    
    func setAvatars(childs: [Child]){
        firstChild.setChild(childs.first)
        firstChild.isHidden = false
        secondChild.setChild(childs.second)
        secondChild.isHidden = false
        
        if childs.second != nil {
            thirdChild.isHidden = false
            thirdChild.setChild(childs[safe: 2])
        }
    }
    
    func displayChildProfile(model: GetProfileResponse){
        router?.navigateToChild(model)
    }
}

extension ChildsViewController: ChildsStackProtocol {
    func plusKids() {
        plusClick()
    }
    
    func childClick(_ child: Child) {
        guard let id = child.id else {
            return
        }
        interactor?.switchChild(id: id)
    }
}

class ChildView: UIView {
    @IBOutlet private var avatarChild: AvatarButton!
    @IBOutlet private var nameLbl: UILabel!
    weak var delegate: ChildsStackProtocol?

    var child: Child?
    @IBAction func avatarClick(_ sender: Any) {
        if child == nil {
            delegate?.plusKids()
        }
        else {
            delegate?.childClick(child!)
        }
    }
    func setChild(_ child: Child?){
        if let child = child {
            self.child = child
            self.isHidden = false
            avatarChild.setAvatar(linktoLoad: child.pic ?? "")
            nameLbl.text = child.name ?? ""
        }
        else {
            avatarChild.setAvatar(#imageLiteral(resourceName: "icPlus"))
        }
    }
}
