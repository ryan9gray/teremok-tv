//
//  PuzzleMasterRouter.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 22.03.2020.
//  Copyright (c) 2020 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PuzzleMasterRoutingLogic: GameParentRouting {
	func openStatistic()

}

protocol PuzzleMasterDataPassing {
    var dataStore: PuzzleMasterDataStore? { get }
}

class PuzzleMasterRouter: PuzzleMasterRoutingLogic, PuzzleMasterDataPassing {


    weak var viewController: PuzzleMasterViewController?
    var dataStore: PuzzleMasterDataStore?
    var modalControllersQueue = Queue<UIViewController>()

    // MARK: Routing
	func navigateMain() {
		pushChild(viewControllerClass: AlphaviteStartViewController.self, storyboard: .alphavite)
	}

	func dismiss() {
		viewController?.dismiss(animated: true)
	}
	private let navigationSubscriptions = Subscriptions<Bool>()
	func subscribeForNavigation(_ callback: @escaping  (_ available: Bool) -> Void) -> Subscription {
		navigationSubscriptions.add(callback)
	}
	func openStatistic() {

	}
	/**
	Clean hierarchy
	*/
	func startFlow(_ idx: Int) {
		guard let controller = viewController else { return }

		let flow = PuzzleGameFlow(master: controller)
		flow.startFlow()
	}

	var moduleRouter: MasterModuleDisplayLogic? {
		return viewController
	}
	var modalChildVC: GameViewController? {
		didSet {
			navigationSubscriptions.fire(canPop())
		}
	}
	var childControllersStack = Stack<GameViewController>() {
		didSet {
			navigationSubscriptions.fire(canPop())
		}
	}

	func introduceController<T: GameViewController>(viewController: T, completion: @escaping (Bool) -> Void)
		where T: IntroduceViewController {
			viewController.setAction { finish in
				completion(finish)
			}
			viewController.modalPresentationStyle = .fullScreen
			self.viewController?.present(viewController, animated: true, completion: nil)
	}

	func pushChild(_ vc: GameViewController){
		remove()
		childControllersStack.toEmpty()
		add(asChildViewController: vc)
	}

	func presentModalChild(viewController: GameViewController?) {
		if let vc = modalChildVC {
			remove(asChildViewController: vc)
			modalChildVC = nil
		} else {
			remove()
		}
		if let viewController = viewController {
			presentChild(viewController: viewController)
			viewController.masterRouter = self
			modalChildVC = viewController
		}
	}

	func pushChild<T: GameViewController>(viewControllerClass: T.Type, storyboard: StoryboardWorker = .main){
		remove()
		childControllersStack.toEmpty()
		add(asChildViewController: viewControllerClass.instantiate(fromStoryboard: storyboard))
	}

	func add(asChildViewController viewController: GameViewController) {
		viewController.masterRouter = self
		childVC = viewController
		self.viewController?.addChild(viewController)
		presentChild(viewController: viewController)
	}

	func presentChild(viewController: GameViewController){
		UIView.transition(with: viewController.view, duration: 0.5, options: .transitionCrossDissolve, animations: {
			self.viewController?.view.insertSubview(viewController.view, at: 1)
		}, completion: nil)

		viewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
		viewController.didMove(toParent: self.viewController)
	}

	func presentNextChild<T: GameViewController>(viewController: T){
		remove()
		add(asChildViewController: viewController)
	}

	func popChild(){
		if  modalChildVC != nil {
			presentModalChild(viewController: nil)
			presentChild(viewController: childVC!)
			return
		}
		guard let oldVC = childControllersStack.pop() else { return }
		remove(asChildViewController: oldVC)
		guard let vc = childControllersStack.top else { return }
		presentChild(viewController: vc)
	}
}
