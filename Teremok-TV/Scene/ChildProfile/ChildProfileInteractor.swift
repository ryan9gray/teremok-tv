//
//  ChildProfileInteractor.swift
//  Teremok-TV
//
//  Created by R9G on 12/10/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChildProfileBusinessLogic {
    var hasMore : Bool { get }
    func fetchChild()
}

protocol ChildProfileDataStore {
    var videoItems: [VideoModel]? { get set }
    var profileModel: GetProfileResponse? { get set }

    var child: Child?  { get set }
}

class ChildProfileInteractor: ChildProfileBusinessLogic, ChildProfileDataStore {
    

    var presenter: ChildProfilePresentationLogic?
    let service: ProfileProtocol = ProfileService()
    
    var videoItems: [VideoModel]? = []
    var profileModel: GetProfileResponse?

    var child: Child?

    
    var nextShift: Int?
    let countSerials = 10
    var hasMore : Bool = true

    // MARK: Do something
    
    func fetchChild(){
        fetchAchievements()
        if let model =  profileModel {
            if let profileResp = model.profile {
                let profile = Profile(with: profileResp)
                AppCacher.mappable.saveObject(profile)
                Profile.current = profile
                self.videoItems = model.favorite
                self.presenter?.present(items: model.favorite ?? [])
                self.presenter?.presentProfileData()
                self.child = profile.childs.filter({$0.current ?? false}).first
            }
        }
    }

    func fetchAchievements(){
        service.getAchievements { [weak self]  (result) in
            switch result {
            case .success(let response):
                self?.presenter?.presentAchievment(response)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }
    
    func fetchProfile() {
        service.getProfile { [weak self] (result) in
            switch result {
            case .success(let response):
                self?.profileModel = response
                if let profileResp = response.profile {
                    let profile = Profile(with: profileResp)
                    AppCacher.mappable.saveObject(profile)
                    Profile.current = profile
                    self?.videoItems = response.favorite
                    self?.presenter?.present(items: response.favorite ?? [])
                    self?.presenter?.presentProfileData()
                }
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }

}
