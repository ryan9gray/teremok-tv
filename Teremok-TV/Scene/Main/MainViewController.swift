//
//  MainViewController.swift
//  Teremok-TV
//
//  Created by R9G on 22.08.2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVFoundation


protocol MainDisplayLogic: CommonDisplayLogic {
    func display(razdels: [Main.RazdelItem])
}

class MainViewController: AbstracViewController, MainDisplayLogic {
    var activityView: LottieHUD?
    
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing & CommonRoutingLogic)?
    
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    @IBOutlet private var collectionView: UICollectionView!

    let animation: [String] = ["Numeral", "unicorn", "Color","box","music", "Animal", "Candy"]
    
    var razdels: [Main.RazdelItem] = []
    
    var cellWidth: CGFloat = 0
    var audioPlayer: AVAudioPlayer?
    var buttonPlayer: AVAudioPlayer?

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
       
        prepareUI()
        fetchRazdels()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
       if ServiceConfiguration.activeConfiguration() == .prod  {
            audioPlayer?.play()
        }
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        audioPlayer?.stop()
    }

    private func prepareUI(){
        activityView = LottieHUD()
        collectionView.delegate = self
        collectionView.register(cells: [MainlCollectionViewCell.self])
        collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
        cellWidth = view.bounds.width/3.2

        let backSound = BackgroundMediaWorker.getSound()

        do {
            audioPlayer = try AVAudioPlayer(contentsOf: backSound)
        } catch {
            print("no file \(backSound)")
        }
        let buttonSound = URL(fileURLWithPath: Bundle.main.path(forResource: "push_level_up", ofType: "mp3")!)

        do {
            buttonPlayer = try AVAudioPlayer(contentsOf: buttonSound)
            buttonPlayer?.prepareToPlay()
        } catch {
            print("no file \(buttonSound)")
        }
    }

    func didSelectSoundPlay(){
        audioPlayer?.stop()
        buttonPlayer?.play()
    }

    // MARK: Do something
    
    func fetchRazdels(){
        self.interactor?.getMainContent()
        showPreloader()
    }
    
    func display(razdels: [Main.RazdelItem]) {
        hidePreloader()
        self.razdels = razdels
        collectionView.reloadData()
    }
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
        var visibleRect = CGRect()
        
        visibleRect.origin = collectionView.contentOffset
        visibleRect.size = collectionView.bounds.size
        
        let visiblePoint = CGPoint(x: visibleRect.midX, y: visibleRect.midY)
        
        guard let indexPath = collectionView.indexPathForItem(at: visiblePoint) else { return }
        (collectionView.cellForItem(at: indexPath) as? MainlCollectionViewCell)?.playRainbow()
    }
}

extension MainViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        didSelectSoundPlay()
        self.router?.navigateToRazdel(number: indexPath.row)
    }
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath){
        
        if let razdel = cell as? MainlCollectionViewCell {
            razdel.playAnimation()
        }
        if let centerIdx = collectionView.centerCellIndexPath,
            let centerCell = collectionView.cellForItem(at: centerIdx) as? MainlCollectionViewCell {
         centerCell.playRainbow()
        }

    }
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if let razdel = cell as? MainlCollectionViewCell {
            razdel.pauseAnimation()
        }
    }
}

extension MainViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return razdels.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withCell: MainlCollectionViewCell.self, for: indexPath)
        let razdel = razdels[indexPath.row]
        cell.configurate(title: razdel.title, image: Cloud.clouds.randomElement(), link: razdel.link)
        cell.setAnimation()
        cell.addRainbow()
        return cell
    }
    
}
extension MainViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: cellWidth, height: collectionView.bounds.height)
    }
}
