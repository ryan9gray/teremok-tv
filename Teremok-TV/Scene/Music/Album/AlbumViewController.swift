//
//  AlbumViewController.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 17/03/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AlbumDisplayLogic: CommonDisplayLogic {
    func displayAlbums(_ albums: [Album.Item])
}

class AlbumViewController: MusicViewController, AlbumDisplayLogic {
    var interactor: AlbumBusinessLogic?
    var router: (NSObjectProtocol & AlbumRoutingLogic & AlbumDataPassing & CommonRoutingLogic)?
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    var activityView: LottieHUD?
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AlbumInteractor()
        let presenter = AlbumPresenter()
        let router = AlbumRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        collectionView.delegate = self
        let cells = [PlaylistCollectionViewCell.self, LoadingCollectionViewCell.self]
        collectionView.register(cells: cells)
        prepareUI()
        //interactor?.getMain()
        if self.albums.isEmpty {
            self.albums.append(Album.Item(name: "Загруженые", imageUrl: Bundle.main.url(forResource: "downloadCover", withExtension: "png")?.absoluteString ?? "", description: ""))
        }
        collectionView.reloadData()
    }

    private func prepareUI(){
        activityView = LottieHUD()

        collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
        showPreloader()
    }

    @IBOutlet private var collectionView: UICollectionView!

    var albums: [Album.Item] = []

    func displayAlbums(_ albums: [Album.Item]) {
        hidePreloader()
        if self.albums.isEmpty {
            self.albums.append(Album.Item(name: "Загруженые", imageUrl: Bundle.main.url(forResource: "downloadCover", withExtension: "png")?.absoluteString ?? "", description: ""))
        }
        self.albums.append(contentsOf: albums)
        collectionView.reloadData()
    }

}
extension AlbumViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            router?.navigateToDownload()
        } else {
            router?.navigateToAlbum(number: (indexPath.row - 1))
        }
    }
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath){
        if indexPath.row == albums.count-1 {
            interactor?.getMain()
        }
    }
}
extension AlbumViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return albums.count + (self.interactor!.hasMore ? 1 : 0)//danger
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        if indexPath.row == albums.count {
            let cell = collectionView.dequeueReusableCell(withCell: LoadingCollectionViewCell.self, for: indexPath)
            return cell
        }
        let cell = collectionView.dequeueReusableCell(withCell: PlaylistCollectionViewCell.self, for: indexPath)
        let album = albums[indexPath.row]
        cell.configure(item: album)
        return cell
    }

}
extension AlbumViewController: UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 120, height: collectionView.bounds.height)
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 30
    }
}

