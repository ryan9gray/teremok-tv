//
//  MusicMasterInteractor.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 16/03/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MusicMasterBusinessLogic {
    func toFav(id: Int)
    func toDownload(index: Int)
    func listenAction(id: Int)
    func setPLaylist(_ playlist: MusicPlaylistResponse)
}

protocol MusicMasterDataStore {
    var playlist: MusicPlaylistResponse? { get set }
}

class MusicMasterInteractor: MusicMasterBusinessLogic, MusicMasterDataStore {
    var presenter: MusicMasterPresentationLogic?

    let service: MusicActionProtocol = MusicActionService()
    var playlist: MusicPlaylistResponse?

    func setPLaylist(_ playlist: MusicPlaylistResponse) {
        self.playlist = playlist
    }

    func toFav(id: Int) {
        service.toFav(with: id) { response in
            switch response {
            case .success(_ ):
                break
            case .failure(let error):
                print("\(error.localizedDescription)")
            }
        }
    }

    func toDownload(index: Int) {
        guard let track = playlist?.items?[safe: index] else { return }

        downloadTrack(track: track)

        service.toDownload(with: track.id ?? 0) { response in
            switch response {
            case .success(_ ):
                break
            case .failure(let error):
                print("\(error.localizedDescription)")
            }
        }
    }

    func downloadTrack(track: MusicPlaylistItemResponse) {
        guard let link = track.link, let url = URL(string: link), let id = track.id else { return }
        let name = [ "\(id)", track.name, track.album?.name ?? "" ].joined(separator: ".")
        BackgroundSession.shared.download(url, name: name)
    }

    func listenAction(id: Int) {
        service.toPlayed(with: id) { _ in

        }
    }
}
