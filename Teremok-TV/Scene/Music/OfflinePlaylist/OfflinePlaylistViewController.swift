//
//  OfflinePlaylistViewController.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 21/04/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OfflinePlaylistDisplayLogic: CommonDisplayLogic {
    func displayPlaylist(_ playlist: [MusicMaster.OfflineMusicModel])
}

class OfflinePlaylistViewController: MusicViewController, OfflinePlaylistDisplayLogic {
    var interactor: OfflinePlaylistBusinessLogic?
    var router: (NSObjectProtocol & OfflinePlaylistRoutingLogic & OfflinePlaylistDataPassing & CommonRoutingLogic)?
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    var activityView: LottieHUD?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = OfflinePlaylistInteractor()
        let presenter = OfflinePlaylistPresenter()
        let router = OfflinePlaylistRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    @IBOutlet private var collectionView: UICollectionView!

    var items: [MusicMaster.OfflineMusicModel] = [] {
        didSet {
            collectionView.reloadData()
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        prepareUI()
        interactor?.getPlaylist()
        NotificationCenter.default.addObserver(self, selector: #selector(setSelected), name: .SwichTrack, object: nil)
    }
    private func prepareUI(){
        activityView = LottieHUD()
        collectionView.delegate = self
        collectionView.register(cells: [TrackCollectionViewCell.self])
        collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
    }

    func displayPlaylist(_ playlist: [MusicMaster.OfflineMusicModel]) {
        items = playlist

        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            if let type = self.master?.type, case .offline(idx: let idx, models: _) = type  {
                self.collectionView.selectItem(at: IndexPath(row: idx, section: 0), animated: true, scrollPosition: .centeredVertically)
            }
        }
    }

    @objc func setSelected(_ notification: NSNotification) {
        guard let index = notification.object as? Int else { return }

        let indexPath = IndexPath(row: index, section: 0)
        collectionView.scrollToItem(at: indexPath, at: .centeredVertically, animated: true)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.collectionView.selectItem(at: indexPath, animated: true, scrollPosition: .centeredVertically)
        }
    }

    deinit {
        NotificationCenter.default.removeObserver(self, name: .SwichTrack, object: nil)
    }
}
extension OfflinePlaylistViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.playTrack(track: indexPath.row, playlist: items)
        
    }
    func collectionView(_ collectionView: UICollectionView, shouldSelectItemAt indexPath: IndexPath) -> Bool {
        if let indexPaths = collectionView.indexPathsForSelectedItems, indexPaths.contains(indexPath) {
            collectionView.deselectItem(at: indexPath, animated: true)
            master?.pauseTrack()
            return false
        }
        return true
    }
}
extension OfflinePlaylistViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return items.count
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        let cell = collectionView.dequeueReusableCell(withCell: TrackCollectionViewCell.self, for: indexPath)
        let item = items[indexPath.row]
        cell.configurate(title: item.name, subtitle: item.albumName)
        return cell
    }
}
extension OfflinePlaylistViewController: UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: 40.0)
    }
}
