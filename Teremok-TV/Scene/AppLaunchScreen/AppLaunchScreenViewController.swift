//
//  AppLaunchScreenViewController.swift
//  Teremok-TV
//
//  Created by R9G on 17/10/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie

class AppLaunchScreenViewController: UIViewController {
    private var animationView: AnimationView!
    
    override func viewDidLoad() {
        super.viewDidLoad()

        if ServiceConfiguration.activeConfiguration() == .sandbox  {
            ViewHierarchyWorker.setRootViewController(rootViewController: MasterViewController.instantiate(fromStoryboard: .main))
            dismiss(animated: true, completion: nil)
            return
        }

        animationView = AnimationView(name: AppLaunchScreen.Animation.finish.rawValue)
        animationView.frame = view.bounds
        animationView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        animationView.contentMode = .scaleAspectFill
        animationView.loopMode = .playOnce
        animationView.animationSpeed = 1.0
        view.addSubview(animationView)
        start()
    }
    
    // MARK: Do something
    
    func start() {
        animationView.animation = Animation.named(AppLaunchScreen.Animation.finish.rawValue)
        animationView.play(completion: { _ in
            print("finish animation")
            self.loop()
        })
    }
    
    func loop() {
        animationView.animation = Animation.named(AppLaunchScreen.Animation.loop.rawValue)
        animationView.loopMode = .loop
        animationView.animationSpeed = 1.0
        animationView.play()
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.finish()
        }
    }
    func finish() {
        animationView.animation = Animation.named(AppLaunchScreen.Animation.finish.rawValue)
        animationView.loopMode = .playOnce
        animationView.animationSpeed = 1.0
        animationView.play(fromProgress: 1, toProgress: 0, completion: { [weak self] _ in
            self?.onBoard()
        })
    }

    func access() {
        let bundleResourceRequest = NSBundleResourceRequest(tags: Set([OnDemandLoader.Tags.Initial.onBoarding.rawValue]))
        bundleResourceRequest.conditionallyBeginAccessingResources { [unowned self] available in
            DispatchQueue.main.async {
                if available {
                    self.onBoarding()
                  } else {
                      bundleResourceRequest.beginAccessingResources { error in
                        self.access()
                      }
                  }
            }
        }
    }

    func onBoard() {
        if !LocalStore.onBoarding {
            access()
        } else {
            ViewHierarchyWorker.setRootViewController(rootViewController: MasterViewController.instantiate(fromStoryboard: .main))
            dismiss(animated: true, completion: nil)
        }
    }

    func onBoarding() {
        let vc = OnboardingViewController.instantiate(fromStoryboard: .welcome)
        ViewHierarchyWorker.setRootViewController(rootViewController: vc)
        dismiss(animated: true, completion: nil)
    }

    enum AppLaunchScreen {
        enum Animation: String {
            case start = "Shade_open"
            case loop = "Shade"
            case finish = "Shade_close"
        }
    }
}
