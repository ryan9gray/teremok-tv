//
//  StoreInteractor.swift
//  Teremok-TV
//
//  Created by R9G on 04/12/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyStoreKit

protocol StoreBusinessLogic {
    func buy(sub: RegisteredPurchase)
    func restore()
    func fetchProduct(sub: RegisteredPurchase, completion: @escaping (String) -> Void)
}

protocol StoreDataStore {
    
}

class StoreInteractor: StoreBusinessLogic, StoreDataStore {
    var presenter: StorePresentationLogic?

    let purchaseService: PurchaseProtocol = PurchaseService()
    let storeService: SwiftyStorePorotocol = SwiftyStoreHelper()

    func fetchProduct(sub: RegisteredPurchase, completion: @escaping (String) -> Void) {
        storeService.info(product: sub, completion: completion)
    }
    
    func restore() {
        storeService.restoreSub { [weak self] result in
            switch result {
            case .success(let product):
                self?.restore(product: product)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }
    
    func buy(sub: RegisteredPurchase) {
        storeService.buy(product: sub) { [weak self] result in
            switch result {
            case .success(let product):
                self?.purchase(product: product)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
        }
    }
    
    func restore(product: Purchase) {
        presenter?.presentPurchase()
        let receiptData = SwiftyStoreKit.localReceiptData
        guard let receiptString = receiptData?.base64EncodedString(options: []),
            let transactionIdentifier = product.transaction.transactionIdentifier else {
                return
        }
        let productId = product.productId
        purchaseService.toSubscribe(
            receipt: receiptString,
            productId: productId,
            transactionIdentifier: transactionIdentifier,
            isRestore: true
        ) { [weak self] result in
            switch result {
            case .success(let response):
                print(response.state ?? "")
                NotificationCenter.default.post(name: NSNotification.Name.ProfileNeedReload, object: nil)
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            }
            if product.needsFinishTransaction {
                SwiftyStoreKit.finishTransaction(product.transaction)
            }
        }
    }
    
    func purchase(product: PurchaseDetails) {
        presenter?.presentPurchase()
        
        let receiptData = SwiftyStoreKit.localReceiptData
        guard let receiptString = receiptData?.base64EncodedString(options: []),
            let transactionIdentifier = product.transaction.transactionIdentifier else {
                return
        }
        
        purchaseService.toSubscribe(
            receipt: receiptString,
            productId: product.productId,
            transactionIdentifier: transactionIdentifier,
            isRestore: false
        ) { [weak self] result in
            switch result {
            case .success(let response):
                print(response.state ?? "")
                NotificationCenter.default.post(name: NSNotification.Name.ProfileNeedReload, object: nil)
                self?.presenter?.successPurchase()
            case .failure(let error):
                self?.presenter?.presentError(error: error)
                
            }
            if product.needsFinishTransaction {
                SwiftyStoreKit.finishTransaction(product.transaction)
            }
        }
    }
}
