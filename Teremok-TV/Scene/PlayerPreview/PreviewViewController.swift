//
//  PreviewViewController.swift
//  Teremok-TV
//
//  Created by R9G on 05/09/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVKit
import Trackable

protocol PreviewDisplayLogic: CommonDisplayLogic {
    func playVideo(url: URL)
    func displayData(items: [Preview.StreamItem])
    func displayRecomendate(items: [PreviewModel])
    var isOffline: Bool { get set }

}

class PreviewViewController: AbstracViewController, PreviewDisplayLogic {
    var activityView: LottieHUD?
    
    var interactor: PreviewBusinessLogic?
    var router: (PreviewRoutingLogic & PreviewDataPassing & CommonRoutingLogic)?

    // MARK: Object lifecycle

    @IBOutlet private var collectionView: UICollectionView!
    
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = PreviewInteractor()
        let presenter = PreviewPresenter()
        let router = PreviewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    weak var playerVC: PlayerViewController!
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "playerSeg" {
            if let container = segue.destination as? PlayerViewController {
                playerVC = container
                playerVC.fullOverlay.delegate = self
            }
        }
    }
    
    // MARK: View lifecycle
    
    @IBAction func backClick(_ sender: Any) {
        masterRouter?.popChild()
    }
    
    var streams: [Preview.StreamItem] = []
    var recommendations: [PreviewModel] = []
    var isOffline = false
    
    @IBOutlet private var playerContainer: UIView!
    @IBOutlet private var titleLbl: UILabel!
    
    override func viewDidLoad() {
        super.viewDidLoad()

        prepareUI()
        setupTrackableChain(parent: analytics)

        interactor?.fetchData()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)

        playerVC.fullOverlay.pause()
    }

    func prepareUI(){
        collectionView.delegate = self
        let cells = [PreviewCollectionViewCell.self, LoadingCollectionViewCell.self]
        collectionView.register(cells: cells)
    }

    func displayData(items: [Preview.StreamItem]){
        streams = items
    }

    func setupControls(){
        playerVC.fullOverlay.downloadButton.isSelected = router?.dataStore?.videoModel?.downloadMe ?? false
        playerVC.fullOverlay.heartButton.isSelected = router?.dataStore?.videoModel?.likedMe ?? false
    }
    
    func displayRecomendate(items: [PreviewModel]){
        recommendations = items
        playerVC.fullOverlay.isOffline = self.isOffline
        collectionView.reloadData()
    }

    var currentLink: URL? {
        didSet{
            playerVC.contentURL = currentLink
        }
    }
    
    func playVideo(url: URL){
        setupControls()
        currentLink = url
        getName()
    }

    func getName(){
        titleLbl.text = (router?.dataStore?.videoModel?.series?.name ?? "") + "\n" + (router?.dataStore?.videoModel?.name ?? "")
    }

    deinit {
        playerVC.removeFromParent()
        playerVC = nil
        track(Events.Time.Video, trackedProperties: [Keys.Timer  ~>> playerVC?.player?.currentItem?.currentTime().seconds ?? 0.0])
    }
}

extension PreviewViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        //self.router?.navigateToPreview(number: indexPath.row)
        track(
            Events.VideoFlow.RecommendationTap,
            trackedProperties: [Keys.Identifier ~>> router?.dataStore?.videoItem?.recommendations?[indexPath.row].id ?? 0]
        )
        interactor?.fetchRecomandation(idx: indexPath.row)
    }
}
extension PreviewViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return recommendations.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withCell: PreviewCollectionViewCell.self, for: indexPath)
        cell.configure(item: recommendations[indexPath.row])
        return cell
    }
}
extension PreviewViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.bounds.height * 1.76, height: collectionView.bounds.height)
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 10
    }
}

extension PreviewViewController : TrackableClass {
    var trackedProperties: Set<TrackedProperty> {
        return [Keys.Video ~>> router?.dataStore?.videoModel?.id?.stringValue ?? "id"]
    }
}

extension PreviewViewController : AVPlayerOverlayVCDelegate {
    func avPlayerOverlay(_ vc: TTPlayerViewController, didFullScreen sender: Any?) {
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, willNormalScreen sender: Any?) {
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, didNormalScreen sender: Any?) {
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, periodicTimeObserver time: CMTime) {
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, statusReadyToPlay sender: Any?) {
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, didCloseAll sender: Any?) {
    }
    
    func avPlayerOverlay(_ vc: TTPlayerViewController, download sender: Any?) {
        let yes = UIAlertAction(title: "Скачать", style: .default, handler: { (_) in
            self.interactor?.dowload()
        })
        let no = UIAlertAction(title: "Закрыть", style: .cancel, handler: nil)
        self.present(title: "Скачать серию?", actions: [yes, no], completion: nil)
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, like sender: Any?) {
        self.interactor?.addToFav()
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, reklam sender: Any?){
        masterRouter?.navigateToStore()
    }
    func avPlayerOverlay(_ vc: TTPlayerViewController, endPlay sender: Any?) {
        track(Events.VideoFlow.VideoEnd, trackedProperties: [Keys.Identifier ~>> router?.dataStore?.videoModel?.id?.stringValue ?? "id"])
    }
}
