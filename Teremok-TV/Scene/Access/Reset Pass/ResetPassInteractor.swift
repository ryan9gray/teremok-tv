//
//  ResetPassInteractor.swift
//  Teremok-TV
//
//  Created by R9G on 15/09/2018.
//  Copyright (c) 2018 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ResetPassBusinessLogic {
    func sendPass(_ pass: String)
    func sendEmail(_ email: String)
    func sendCode(_ code: String)
}

protocol ResetPassDataStore {
    var email: String {get set}
    var pass: String {get set}
    var code: String {get set}
}

class ResetPassInteractor: ResetPassBusinessLogic, ResetPassDataStore {
    var pass: String = ""
    var code: String = ""
    var email: String = ""

    var presenter: ResetPassPresentationLogic?
    let service: ResetPassProtocol = ResetPassService()


    func sendPass(_ pass: String){
        self.pass = pass
        service.toRestore(email: email, newPass: pass, code: code) { [weak self] result in
            switch result {
            case .success(_):
                self?.presenter?.setDone()
            case .failure(let error):
                self?.presenter?.presentError(error: error, completion: nil)
            }
        }
    }

    func sendEmail(_ email: String){
        self.email = email
        service.toRestoreQuery(email: email) { [weak self] result in
            switch result {
            case .success(_):
                self?.presenter?.setScreen(ResetPass.Screen.Code)
            case .failure(let error):
                self?.presenter?.presentError(error: error, completion: nil)
            }
        }
    }

    func sendCode(_ code: String){
        self.code = code
        service.toCheckCode(email: email, newPass: pass, code: code) { [weak self] result in
            switch result {
            case .success(_):
                self?.presenter?.setScreen(ResetPass.Screen.Pass)
            case .failure(let error):
                self?.presenter?.presentError(error: error, completion: nil)
            }
        }
    }
}
