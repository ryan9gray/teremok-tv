//
//  AnimalsRoundsViewController.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 19/05/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AnimalsRoundsDisplayLogic: CommonDisplayLogic {
    func displayList(_ items: [AnimalsRounds.Item])
}

class AnimalsRoundsViewController: GameViewController, AnimalsRoundsDisplayLogic {
    var interactor: AnimalsRoundsBusinessLogic?
    var router: (AnimalsRoundsRoutingLogic & AnimalsRoundsDataPassing & CommonRoutingLogic)?
    var modallyControllerRoutingLogic: CommonRoutingLogic? {
        get { return router }
    }
    var activityView: LottieHUD?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AnimalsRoundsInteractor()
        let presenter = AnimalsRoundsPresenter()
        let router = AnimalsRoundsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle
    @IBOutlet private var collectionView: UICollectionView!

    var items: [AnimalsRounds.Item] = [] {
        didSet {
            collectionView.reloadData()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        collectionView.delegate = self
        collectionView.register(cells: [AnimalСompilationCollectionViewCell.self])
        prepareUI()
        interactor?.getList()
    }

    private func prepareUI(){
        activityView = LottieHUD()

        collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
        showPreloader()
    }

    func displayList(_ items: [AnimalsRounds.Item]) {
        self.items = items
        hidePreloader()
    }

    func open(idx: Int) {
        guard interactor?.packAccess(idx: idx) ?? false else {
            return
        }
        guard Profile.current?.premiumGame ?? false else {
            router?.buyAlert()
            return
        }

        if interactor?.packExist(idx:idx) ?? false {
            router?.showPack(idx: idx)
        } else {
            let alert = configureAlert(with: "Не закрывайте приложение! Идёт скачивание.")
            presentAlertModally(alertController: alert)
            showLoadingView(idx: idx) { [weak self] result in
                alert.dismiss(animated: true, completion: nil)
                switch result {
                case .success:
                    self?.open(idx: idx)
                case .failure(let error):
                    self?.present(error: error)
                }
            }
        }
    }
    func showLoadingView(idx: Int, complition: @escaping (Result<Bool>) -> Void) {
        interactor?.downloadPack(idx: idx, complition: complition)
    }

}
extension AnimalsRoundsViewController: UICollectionViewDelegate {

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if indexPath.row == 0 {
            router?.showPack(idx: indexPath.row)
        } else {
            open(idx: indexPath.row)
        }
    }
}
extension AnimalsRoundsViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return items.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withCell: AnimalСompilationCollectionViewCell.self, for: indexPath)
        let item = items[indexPath.row]
        cell.configuration(name: item.name, pack: indexPath.row, link: item.imageUrl)
        return cell
    }

}
extension AnimalsRoundsViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let height = collectionView.bounds.height / 2.1
        return CGSize(width: height / 0.88, height: height)
    }
}
