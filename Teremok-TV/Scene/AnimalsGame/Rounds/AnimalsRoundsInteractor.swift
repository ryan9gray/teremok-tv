//
//  AnimalsRoundsInteractor.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 19/05/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AnimalsRoundsBusinessLogic {
    func getList()
    func downloadPack(idx: Int, complition: @escaping (Result<Bool>) -> Void)
    func packExist(idx: Int) -> Bool
    func packAccess(idx: Int) -> Bool
}

protocol AnimalsRoundsDataStore {
    var list: [AnimalListResponse] { get }
}

class AnimalsRoundsInteractor: AnimalsRoundsBusinessLogic, AnimalsRoundsDataStore {
    var presenter: AnimalsRoundsPresentationLogic?
    let service: AnimalsGameProtocol = AnimalsGameService()

    let downloadService = AnimalPackDownloader()
    private let userDefaults = UserDefaults.standard

    var list: [AnimalListResponse] = []

    func getList() {
        service.getListPacks() { [weak self] result in
            guard let self = self else { return }

            switch result {
            case .success(let response):
                self.response(response.list)
            case .failure(let error):
                print(error.localizedDescription)
            }
        }
    }

    func response(_ response: [AnimalListResponse]){
        list = response
        AppCacher.mappable.saveArray(response)
        presenter?.presentList(response)
    }

    func downloadPack(idx: Int, complition: @escaping (Result<Bool>) -> Void) {
        guard let id = list[idx].id else { return }

        service.getPack(id: id) { [weak self] result in
            switch result {
            case .success(let response):
                self?.save(response: response, id: id.stringValue, complition: complition)
            case .failure(let error):
                complition(.failure(DownloadError.base))
                self?.presenter?.presentError(error: error)
            }
        }
    }

    func packAccess(idx: Int) -> Bool {
        return (list[idx].count ?? 0) > 0
    }

    func save(response: [AnimalsPackResponse], id: String, complition: @escaping (Result<Bool>) -> Void) {
        var pack: [AnimalsGame.PackAnimal] = []
        self.downloadService.locals = []
        for animal in response {
            guard let name = animal.name, let image = animal.png, let sound = animal.mp3 else { return }

            pack.append(AnimalsGame.PackAnimal(name: name, image: image, sound: sound, id: animal.id ?? 0))
        }
        guard pack.count > 0 else {
            complition(.failure(DownloadError.base))
            return
        }
        
        next(pack, idx: 0, id: id) { [weak self] finish in
            guard let self = self else { return }
            if finish {
                let locals = self.downloadService.locals
                AppCacher.mappable.saveArray(locals, withId: "Pack_\(id)")
                complition(.success(true))
            } else {
                complition(.failure(DownloadError.base))
            }
        }
    }

    func next(_ pack: [AnimalsGame.PackAnimal], idx: Int, id: String, complition: @escaping (Bool) -> Void) {
        var i = idx
        if i == pack.count {
            complition(true)
            return
        }
        downloadService.downloadPack(item: pack[i], pack: id) { [weak self] finish in
            if finish {
                i += 1
                self?.next(pack, idx: i, id: id, complition: complition)
            } else {
                complition(false)
            }
        }
    }

    func packExist(idx: Int) -> Bool {
        guard let id = list[idx].id else { return false }
        let pack = AppCacher.mappable.getArray(of: AnimalsGame.AnimalLocal.self, withId: "Pack_\(id)").array
        if pack.count > 0, pack.count == list[idx].count ?? 0 {
            return true
        } else {
            AppCacher.mappable.removeValue(forIdentifier: "Pack_\(id)")
            return false
        }
    }
}
