//
//  AnimalsWordsViewController.swift
//  Teremok-TV
//
//  Created by Evgeny Ivanov on 19/05/2019.
//  Copyright (c) 2019 xmedia. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import AVKit

class AnimalsWordsViewController: GameViewController {
    @IBOutlet private var collectionView: UICollectionView!
    @IBOutlet private var startButton: TTAbstractMainButton!
    private var audioPlayer: AVAudioPlayer?

    @IBAction func startClick(_ sender: Any) {
        output.startChoice()
    }

    var input: Input!
    var output: Output!

    struct Output {
        let startChoice: () -> Void
    }
    
    struct Input {
        var animals: [AnimalsGame.Animal]
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        prepareUI()
        displayAnimals(input.animals)
    }

    private func prepareUI(){
        collectionView.delegate = self
        collectionView.dataSource = self
        let cells = [AnimalCollectionViewCell.self]
        collectionView.register(cells: cells)
        collectionView.decelerationRate = UIScrollView.DecelerationRate.fast
    }

    // MARK: Do something

    var animals: [AnimalsGame.Animal] = []


    func displayAnimals(_ animals: [AnimalsGame.Animal]) {
        self.animals = animals
        collectionView.reloadData()
        startLoop()
    }

    func startLoop() {
        indexAnimals = 0
    }

    var indexAnimals = 0 {
        didSet {
            playSounds(indexAnimals)
        }
    }

    func playSounds(_ idx: Int) {
        do {
            audioPlayer = try AVAudioPlayer(contentsOf: animals[idx].sound)
        } catch {
            print("no file)")
        }
        audioPlayer?.play()
        self.collectionView.selectItem(at: IndexPath.init(row: idx, section: 0), animated: true, scrollPosition: .centeredVertically)

        DispatchQueue.main.asyncAfter(deadline: .now() + 4.0) { [weak self] in
            guard let self = self else { return }

            if self.indexAnimals < (self.animals.count - 1) {
                self.indexAnimals += 1
            } else {
                self.finish()
            }
        }
    }

    func finish() {
        startButton.isHidden = false
    }

    deinit {
    }
}
extension AnimalsWordsViewController: UICollectionViewDelegate {

}
extension AnimalsWordsViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return animals.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withCell: AnimalCollectionViewCell.self, for: indexPath)
        cell.configurate(image: animals[indexPath.row].image)
        return cell
    }
}
